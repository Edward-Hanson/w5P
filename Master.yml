AWSTemplateFormatVersion: '2010-09-09'
Description: Master Stack to deploy CloudBasedProject infrastructure using nested stacks in proper order.

Parameters:
  ProjectName:
    Type: String
    Default: cloudbasedproject

  ImageTag:
    Type: String
    Default: latest

  DatabaseUsername:
    Type: String
    Default: cloudbasedapp

  DatabasePassword:
    Type: String
    NoEcho: true
    Default: cloudbasedapp123



Resources:

################################ VPC Stack ##########################################

  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-vpc'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-igw'

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC


  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-az1'

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-subnet-az2'

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.10.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-az1'

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.11.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-subnet-az2'

  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [0, !GetAZs '']
      CidrBlock: 10.0.20.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-az1'

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [1, !GetAZs '']
      CidrBlock: 10.0.21.0/24
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-az2'


  NatGateway1EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-eip-1'

  NatGateway2EIP:
    Type: AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-eip-2'

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-1'

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway2EIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-nat-2'


  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-public-routes'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-routes-az1'

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref PrivateSubnet1

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-private-routes-az2'

  DefaultPrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      SubnetId: !Ref PrivateSubnet2

  DatabaseRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-database-routes'

  DatabaseSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet1

  DatabaseSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref DatabaseRouteTable
      SubnetId: !Ref DatabaseSubnet2

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-alb-sg'
      GroupDescription: Security group for ALB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-alb-sg'

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-ecs-sg'
      GroupDescription: Security group for ECS tasks
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2020
          ToPort: 2020
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-ecs-sg'

  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${ProjectName}-db-sg'
      GroupDescription: Security group for RDS PostgreSQL
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ECSSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-sg'

  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.s3'
      VpcEndpointType: Gateway
      RouteTableIds:
        - !Ref PrivateRouteTable1
        - !Ref PrivateRouteTable2


################################ RDS Stack ##########################################

  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupName: !Sub '${ProjectName}-db-subnet-group'
      DBSubnetGroupDescription: Subnet group for RDS database
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-subnet-group'

  DatabaseParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: postgres17
      Description: Parameter group for PostgreSQL 17
      Parameters:
        shared_preload_libraries: pg_stat_statements
        log_statement: all
        log_min_duration_statement: 1000
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-parameter-group'

  DatabaseInstance:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    Properties:
      DBInstanceIdentifier: !Sub '${ProjectName}-database'
      DBInstanceClass: db.t3.micro
      Engine: postgres
      EngineVersion: '17.5'
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      AllocatedStorage: 20
      StorageType: gp2
      StorageEncrypted: true
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      DBParameterGroupName: !Ref DatabaseParameterGroup
      VPCSecurityGroups:
        - !Ref DatabaseSecurityGroup
      BackupRetentionPeriod: 7
      PreferredBackupWindow: '03:00-04:00'
      PreferredMaintenanceWindow: 'sun:04:00-sun:05:00'
      MultiAZ: false
      AutoMinorVersionUpgrade: true
      DeletionProtection: false
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-database'

  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: cloudbasedproject-db-credential
      Description: Database credentials for Cloud Based Project
      SecretString: !Sub |
        {
          "username": "${DatabaseUsername}",
          "password": "${DatabasePassword}",
          "host": "${DatabaseInstance.Endpoint.Address}",
          "port": "5432",
          "dbname": "postgres"
        }
      Tags:
        - Key: Name
          Value: !Sub '${ProjectName}-db-credential'


################################### ECS Stack ##########################################


  # ApplicationLoadBalancer:
  #   Type: AWS::ElasticLoadBalancingV2::LoadBalancer
  #   Properties:
  #     Name: !Sub '${ProjectName}-alb'
  #     Scheme: internet-facing
  #     Type: application
  #     Subnets:
  #       - !Ref PublicSubnet1
  #       - !Ref PublicSubnet2
  #     SecurityGroups:
  #       - !Ref ALBSecurityGroup
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${ProjectName}-alb'

  # BlueTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub '${ProjectName}-blue-tg'
  #     Port: 2020
  #     Protocol: HTTP
  #     VpcId: !Ref VPC
  #     TargetType: ip
  #     HealthCheckPath: /actuator/health
  #     HealthCheckProtocol: HTTP
  #     HealthCheckPort: 2020
  #     Matcher:
  #       HttpCode: 200

  # GreenTargetGroup:
  #   Type: AWS::ElasticLoadBalancingV2::TargetGroup
  #   Properties:
  #     Name: !Sub '${ProjectName}-green-tg'
  #     Port: 2020
  #     Protocol: HTTP
  #     VpcId: !Ref VPC
  #     TargetType: ip
  #     HealthCheckPath: /actuator/health
  #     HealthCheckProtocol: HTTP
  #     HealthCheckPort: 2020
  #     Matcher:
  #       HttpCode: 200


  # ALBListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref ApplicationLoadBalancer
  #     Port: 80
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: forward
  #         TargetGroupArn: !Ref BlueTargetGroup


  # ALBTestListener:
  #   Type: AWS::ElasticLoadBalancingV2::Listener
  #   Properties:
  #     LoadBalancerArn: !Ref ApplicationLoadBalancer
  #     Port: 8080
  #     Protocol: HTTP
  #     DefaultActions:
  #       - Type: fixed-response
  #         FixedResponseConfig:
  #           StatusCode: 404
  #           ContentType: text/plain
  #           MessageBody: "No default test target group. CodeDeploy owns this listener."


  # ECSCluster:
  #   Type: AWS::ECS::Cluster
  #   Properties:
  #     ClusterName: !Sub '${ProjectName}-cluster'
  #     CapacityProviders: 
  #       - FARGATE
  #       - FARGATE_SPOT
  #     DefaultCapacityProviderStrategy:
  #       - CapacityProvider: FARGATE
  #         Weight: 1
  #       - CapacityProvider: FARGATE_SPOT
  #         Weight: 4
  #     ClusterSettings:
  #       - Name: containerInsights
  #         Value: enabled

  # LogGroup:
  #   Type: AWS::Logs::LogGroup
  #   Properties:
  #     LogGroupName: !Sub '/ecs/${ProjectName}'
  #     RetentionInDays: 14

  # ECSTaskExecutionRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: sts:AssumeRole
  #     ManagedPolicyArns:
  #       - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  #     Policies:
  #       - PolicyName: SecretsManagerPolicy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - secretsmanager:GetSecretValue
  #               Resource:
  #                 - !Ref DatabaseSecret

  # ECSTaskRole:
  #   Type: AWS::IAM::Role
  #   Properties:
  #     AssumeRolePolicyDocument:
  #       Version: '2012-10-17'
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: ecs-tasks.amazonaws.com
  #           Action: sts:AssumeRole
  #     Policies:
  #       - PolicyName: S3Policy
  #         PolicyDocument:
  #           Version: '2012-10-17'
  #           Statement:
  #             - Effect: Allow
  #               Action:
  #                 - s3:GetObject
  #                 - s3:PutObject
  #                 - s3:DeleteObject
  #                 - s3:ListBucket
  #               Resource:
  #                 - !Sub 'arn:aws:s3:::${ProjectName}-bucket'
  #                 - !Sub 'arn:aws:s3:::${ProjectName}-bucket/*'

  # TaskDefinition:
  #   Type: AWS::ECS::TaskDefinition
  #   DependsOn: DatabaseInstance
  #   Properties:
  #     Family: !Sub '${ProjectName}-task'
  #     NetworkMode: awsvpc
  #     RequiresCompatibilities: 
  #       - FARGATE
  #     Cpu: 512
  #     Memory: 1024
  #     ExecutionRoleArn: !Ref ECSTaskExecutionRole
  #     TaskRoleArn: !Ref ECSTaskRole
  #     ContainerDefinitions:
  #       - Name: !Sub '${ProjectName}-container'
  #         Image: !Sub '343218213563.dkr.ecr.eu-west-1.amazonaws.com/cloudbasedproject-app:${ImageTag}'
  #         PortMappings:
  #           - ContainerPort: 2020
  #         LogConfiguration:
  #           LogDriver: awslogs
  #           Options:
  #             awslogs-group: !Ref LogGroup
  #             awslogs-region: !Ref AWS::Region
  #             awslogs-stream-prefix: ecs
  #         Environment:
  #           - Name: AWS_REGION
  #             Value: !Ref AWS::Region
  #           - Name: DB_HOST
  #             Value: !GetAtt DatabaseInstance.Endpoint.Address
  #           - Name: DB_PORT
  #             Value: 5432
  #           - Name: DB_NAME
  #             Value: postgres
  #         Secrets:
  #           - Name: DB_USERNAME
  #             ValueFrom: !Sub 
  #               - '${SecretArn}:username::'
  #               - SecretArn: !Ref DatabaseSecret
  #           - Name: DB_PASSWORD
  #             ValueFrom: !Sub 
  #               - '${SecretArn}:password::'
  #               - SecretArn: !Ref DatabaseSecret
  #         HealthCheck:
  #           Command: 
  #             - CMD-SHELL
  #             - "curl -f http://localhost:2020/actuator/health || exit 1"
  #           Interval: 30
  #           Timeout: 10
  #           Retries: 3
  #           StartPeriod: 60
  #     Tags:
  #       - Key: Name
  #         Value: !Sub '${ProjectName}-task'


  # ECSService:
  #   Type: AWS::ECS::Service
  #   DependsOn: 
  #     - ALBListener
  #     - ALBTestListener
  #   Properties:
  #     ServiceName: !Sub '${ProjectName}-service'
  #     LaunchType: FARGATE
  #     Cluster: !Ref ECSCluster
  #     DesiredCount: 2
  #     TaskDefinition: !Ref TaskDefinition
  #     DeploymentController:
  #       Type: CODE_DEPLOY
  #     NetworkConfiguration:
  #       AwsvpcConfiguration:
  #         AssignPublicIp: DISABLED
  #         Subnets:
  #           - !Ref PrivateSubnet1
  #           - !Ref PrivateSubnet2
  #         SecurityGroups:
  #           - !Ref ECSSecurityGroup
  #     LoadBalancers:  
  #       - ContainerName: !Sub '${ProjectName}-container'
  #         ContainerPort: 2020
  #         TargetGroupArn: !Ref BlueTargetGroup  


  

# ################################ CodeDeploy Stack ##########################################


#   CodeDeployStack:
#     Type: AWS::CloudFormation::Stack
#     DependsOn: ECSService
#     Properties:
#       TemplateURL: https://deployment-infras-bucket.s3.eu-west-1.amazonaws.com/BG-Tranform.yml
#       Parameters:
#         ProjectName: !Ref ProjectName

# Outputs:
#   DatabaseEndpoint:
#     Description: Database endpoint
#     Value: !GetAtt DatabaseInstance.Endpoint.Address
#     Export:
#       Name: !Sub '${ProjectName}-db-endpoint'

#   DatabasePort:
#     Description: Database port
#     Value: !GetAtt DatabaseInstance.Endpoint.Port
#     Export:
#       Name: !Sub '${ProjectName}-db-port'

#   DatabaseSecretArn:
#     Description: Database secret ARN
#     Value: !Ref DatabaseSecret
#     Export:
#       Name: !Sub '${ProjectName}-db-secret-arn'
